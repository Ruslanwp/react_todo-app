{"version":3,"sources":["Components/Form/Form.jsx","types.js","Components/TodoItem/TodoItem.jsx","Components/TodoList/TodoList.jsx","Components/TodosFilter/TodosFilter.jsx","App.js","Components/localStorage.jsx","index.js"],"names":["Form","PropTypes","shape","id","number","isRequired","title","string","completed","bool","handleQuery","query","setTodos","todos","onKeyDown","e","key","preventDefault","trim","newTodo","Date","type","className","placeholder","value","onChange","event","target","defaultProps","TodoItem","todo","handleCompleteTodo","handleChangeTodo","handleDeleteTodo","useState","onDoubleClick","clickHandler","currentTitle","handleChangeTitle","classNames","editing","checked","onClick","currentNo","onKeyUp","TodoList","map","TodosFilter","React","memo","setFilter","removeCompletedTodos","filterBy","filteredTodosLength","filter","length","href","some","App","checkboxIsActive","checkboxHandler","selectFilterType","initialValue","item","window","localStorage","getItem","JSON","parse","error","storage","setStorage","valueToStore","Function","setItem","stringify","console","log","useLocalStorage","useCallback","filterType","filteredTodos","useMemo","getFilteredTodos","defaultChecked","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47085f37.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoType } from '../../types';\n\nexport const Form = ({ handleQuery, query, setTodos, todos }) => {\n  const createTodo = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n\n      if (query.trim() !== '') {\n        const newTodo = {\n          id: +new Date(),\n          title: query,\n          completed: false,\n        };\n\n        handleQuery('');\n        setTodos([newTodo, ...todos]);\n      }\n    }\n  };\n\n  const setTitle = event => handleQuery(event.target.value);\n\n  return (\n    <form onKeyDown={createTodo}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={query}\n        onChange={setTitle}\n      />\n    </form>\n  );\n};\n\nForm.propTypes = {\n  handleQuery: PropTypes.func.isRequired,\n  setTodos: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(TodoType.isRequired),\n};\n\nForm.defaultProps = {\n  todos: [],\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoType } from '../../types';\n\nexport const TodoItem = ({\n  todo,\n  handleCompleteTodo,\n  handleChangeTodo,\n  handleDeleteTodo,\n}) => {\n  const [onDoubleClick, clickHandler] = useState(0);\n  const [currentTitle, handleChangeTitle] = useState(todo.title);\n\n  const setClicksQuantity = (e) => {\n    handleChangeTitle(e.target.value);\n  };\n\n  const handleEditTodo = (e) => {\n    if (e.key === 'Enter' && currentTitle !== '') {\n      clickHandler(0);\n      handleChangeTodo(todo.id, currentTitle);\n    }\n\n    if (e.key === 'Escape') {\n      clickHandler(0);\n      handleChangeTitle(todo.title);\n    }\n  };\n\n  const { completed, id } = todo;\n\n  return (\n    <li className={classNames({\n      completed,\n      editing: onDoubleClick === 2,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          className=\"toggle\"\n          onChange={() => handleCompleteTodo(id)}\n        />\n        <label onClick={() => {\n          clickHandler(currentNo => currentNo + 1);\n        }}\n        >\n          {currentTitle}\n        </label>\n        <button\n          onClick={() => handleDeleteTodo(id)}\n          type=\"button\"\n          className=\"destroy\"\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={currentTitle}\n        onChange={setClicksQuantity}\n        onKeyUp={handleEditTodo}\n      />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: TodoType.isRequired,\n  handleCompleteTodo: PropTypes.func.isRequired,\n  handleChangeTodo: PropTypes.func.isRequired,\n  handleDeleteTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { TodoType } from '../../types';\n\nexport const TodoList = ({\n  todos,\n  handleCompleteTodo,\n  handleChangeTodo,\n  handleDeleteTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        handleCompleteTodo={handleCompleteTodo}\n        handleChangeTodo={handleChangeTodo}\n        handleDeleteTodo={handleDeleteTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoType.isRequired),\n  handleCompleteTodo: PropTypes.func.isRequired,\n  handleChangeTodo: PropTypes.func.isRequired,\n  handleDeleteTodo: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoType } from '../../types';\n\nexport const TodosFilter = React.memo(({\n  setFilter,\n  removeCompletedTodos,\n  todos,\n  filterBy,\n}) => {\n  const filteredTodosLength = todos.filter(todo => !todo.completed).length;\n\n  const removeHandler = () => {\n    removeCompletedTodos(todos.filter(todo => !todo.completed));\n    setFilter('');\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {(filteredTodosLength > 0\n          ? `${filteredTodosLength} items left`\n          : `nothing to do`\n        )}\n      </span>\n\n      <ul className=\"filters\">\n        <li onClick={() => setFilter('all')}>\n          <a\n            href=\"#/\"\n            className={filterBy === 'all' ? 'selected' : ''}\n          >\n            All\n          </a>\n        </li>\n\n        <li onClick={() => setFilter('uncompleted')}>\n          <a\n            href=\"#/active\"\n            className={filterBy === 'uncompleted' ? 'selected' : ''}\n          >\n            Active\n          </a>\n        </li>\n\n        <li onClick={() => setFilter('completed')}>\n          <a\n            href=\"#/completed\"\n            className={filterBy === 'completed' ? 'selected' : ''}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {todos.some(todo => todo.completed) && (\n      <button\n        onClick={removeHandler}\n        type=\"button\"\n        className=\"clear-completed\"\n      >\n        Clear completed\n      </button>\n      )}\n    </footer>\n  );\n});\n\nTodosFilter.propTypes = {\n  setFilter: PropTypes.func.isRequired,\n  removeCompletedTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(TodoType.isRequired),\n  filterBy: PropTypes.string.isRequired,\n};\n\nTodosFilter.defaultProps = {\n  todos: [],\n};\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useLocalStorage } from './Components/localStorage';\nimport { Form } from './Components/Form/Form';\nimport { TodoList } from './Components/TodoList/TodoList';\nimport { TodosFilter } from './Components/TodosFilter/TodosFilter';\n\nfunction App() {\n  const [query, handleQuery] = useState('');\n  const [checkboxIsActive, checkboxHandler] = useState(false);\n  const [filterBy, selectFilterType] = useState('');\n\n  const [todos, setTodos] = useLocalStorage('todos', []);\n\n  const getFilteredTodos = (value) => {\n    switch (value) {\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n\n      case 'uncompleted':\n        return todos.filter(todo => !todo.completed);\n\n      default:\n      case 'all':\n        return todos;\n    }\n  };\n\n  const setFilter = useCallback((filterType) => {\n    selectFilterType(filterType);\n  }, [todos]);\n\n  const removeCompletedTodos = useCallback(() => {\n    setTodos(todos.filter(todo => !todo.completed));\n  }, [todos]);\n\n  const handleCompleteTodo = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    }));\n  };\n\n  const handleChangeTodo = (todoId, title) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        title,\n      };\n    }));\n  };\n\n  const handleDeleteTodo = (todoId) => {\n    setTodos(todos.filter((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return false;\n    }));\n  };\n\n  const filteredTodos = useMemo(\n    () => getFilteredTodos(filterBy),\n    [filterBy, todos, checkboxIsActive],\n  );\n\n  const toggleCheckbox = () => {\n    if (checkboxIsActive) {\n      checkboxHandler(false);\n      setTodos(todos\n        .map(todo => ({\n          ...todo,\n          completed: false,\n        })));\n    } else {\n      checkboxHandler(true);\n      setTodos(todos\n        .map(todo => ({\n          ...todo,\n          completed: true,\n        })));\n    }\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <Form\n          handleQuery={handleQuery}\n          query={query}\n          setTodos={setTodos}\n          todos={todos}\n        />\n      </header>\n\n      {todos.length !== 0 && (\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            defaultChecked={checkboxIsActive}\n            onChange={toggleCheckbox}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            handleCompleteTodo={handleCompleteTodo}\n            handleChangeTodo={handleChangeTodo}\n            handleDeleteTodo={handleDeleteTodo}\n            todos={filteredTodos}\n            setTodos={setTodos}\n          />\n        </section>\n      )}\n\n      {todos.length > 0 && (\n        <TodosFilter\n          todos={todos}\n          setFilter={setFilter}\n          removeCompletedTodos={removeCompletedTodos}\n          filterBy={filterBy}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport function useLocalStorage(key, initialValue) {\n  const [storage, setStorage] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      const valueToStore\n        = value instanceof Function ? value(storage) : value;\n\n      setStorage(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storage, setValue];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}